package parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;
import lexer.MPLexer;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\003\006\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\003\000\002\011\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\004\000\002\011\006\000" +
    "\002\011\007\000\002\011\004\000\002\011\006\000\002" +
    "\011\007\000\002\011\004\000\002\011\006\000\002\012" +
    "\007\000\002\012\007\000\002\012\004\000\002\012\004" +
    "\000\002\012\006\000\002\024\007\000\002\024\007\000" +
    "\002\024\004\000\002\024\004\000\002\024\006\000\002" +
    "\024\004\000\002\024\006\000\002\004\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\004\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\026\004\001\002\000\006\003\007\004" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffe\001\002\000\006\003\011\005" +
    "\012\001\002\000\004\002\uffff\001\002\000\004\006\013" +
    "\001\002\000\012\027\021\030\020\031\015\032\017\001" +
    "\002\000\004\002\001\001\002\000\004\042\ufff6\001\002" +
    "\000\034\006\013\027\021\030\020\031\015\032\017\033" +
    "\037\034\036\035\026\036\044\037\035\040\031\041\043" +
    "\042\040\001\002\000\004\042\ufff7\001\002\000\004\042" +
    "\ufff9\001\002\000\004\042\ufff8\001\002\000\034\006\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\001\002" +
    "\000\004\042\024\001\002\000\004\024\025\001\002\000" +
    "\034\006\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\001\002\000\006\003\155\004\156\001\002\000\026" +
    "\006\013\007\154\033\037\034\036\035\026\036\044\037" +
    "\035\040\031\041\043\042\040\001\002\000\032\003\uffee" +
    "\005\uffee\006\uffee\007\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002\000\006" +
    "\003\147\004\150\001\002\000\032\003\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\001\002\000\032\003\uffef\005" +
    "\uffef\006\uffef\007\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\001\002\000\032\003" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001\002\000" +
    "\026\004\140\006\013\033\037\034\036\035\026\036\044" +
    "\037\035\040\031\041\043\042\040\001\002\000\006\003" +
    "\131\004\132\001\002\000\006\003\122\004\123\001\002" +
    "\000\006\003\114\025\113\001\002\000\034\006\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002\000" +
    "\032\003\ufff4\005\ufff4\006\ufff4\007\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\001" +
    "\002\000\006\003\104\004\105\001\002\000\006\003\045" +
    "\004\046\001\002\000\032\003\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\001\002\000\006\042\056\043\052\001" +
    "\002\000\016\003\uffc9\005\uffc9\010\uffc9\011\uffc9\042\uffc9" +
    "\043\uffc9\001\002\000\044\003\uffd1\005\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\042\uffd1\043" +
    "\uffd1\001\002\000\036\003\uffc7\005\uffc7\010\uffc7\011\uffc7" +
    "\012\073\015\070\016\075\017\076\020\072\021\074\022" +
    "\100\023\077\042\uffc7\043\uffc7\001\002\000\044\003\uffcf" +
    "\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\042\uffcf\043\uffcf\001\002\000\006\003\065\011" +
    "\066\001\002\000\016\003\uffcb\005\uffcb\010\063\011\uffcb" +
    "\042\uffcb\043\uffcb\001\002\000\044\003\uffd4\005\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\057\014\060\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\042" +
    "\uffd4\043\uffd4\001\002\000\044\003\uffd0\005\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\042\uffd0" +
    "\043\uffd0\001\002\000\006\042\056\043\052\001\002\000" +
    "\006\042\056\043\052\001\002\000\044\003\uffd2\005\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\042\uffd2\043\uffd2\001\002\000\044\003\uffd3\005\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\042" +
    "\uffd3\043\uffd3\001\002\000\006\042\056\043\052\001\002" +
    "\000\016\003\uffca\005\uffca\010\uffca\011\uffca\042\uffca\043" +
    "\uffca\001\002\000\032\003\uffda\005\uffda\006\uffda\007\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\001\002\000\006\042\056\043\052\001\002" +
    "\000\016\003\uffcc\005\uffcc\010\063\011\uffcc\042\uffcc\043" +
    "\uffcc\001\002\000\006\042\056\043\052\001\002\000\006" +
    "\042\056\043\052\001\002\000\006\042\uffc2\043\uffc2\001" +
    "\002\000\006\042\056\043\052\001\002\000\006\042\uffc1" +
    "\043\uffc1\001\002\000\006\042\uffc6\043\uffc6\001\002\000" +
    "\006\042\uffc5\043\uffc5\001\002\000\006\042\uffc3\043\uffc3" +
    "\001\002\000\006\042\uffc4\043\uffc4\001\002\000\044\003" +
    "\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6\013\057\014\060" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\042\uffd6\043\uffd6\001\002\000\022\003\uffc8" +
    "\005\uffc8\010\uffc8\011\uffc8\012\073\015\070\042\uffc8\043" +
    "\uffc8\001\002\000\044\003\uffd5\005\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\057\014\060\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\042\uffd5\043\uffd5" +
    "\001\002\000\032\003\uffe2\005\uffe2\006\uffe2\007\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\001\002\000\024\006\013\033\037\034\036\035" +
    "\026\036\044\037\035\040\031\041\043\042\040\001\002" +
    "\000\030\003\110\005\107\006\013\033\037\034\036\035" +
    "\026\036\044\037\035\040\031\041\043\042\040\001\002" +
    "\000\024\006\013\033\037\034\036\035\026\036\044\037" +
    "\035\040\031\041\043\042\040\001\002\000\032\003\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\032" +
    "\003\ufff5\005\ufff5\006\ufff5\007\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002" +
    "\000\032\003\uffe4\005\uffe4\006\uffe4\007\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\006\042\056\043\052\001\002\000\032\003" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000" +
    "\016\003\uffd7\012\073\015\070\024\uffd7\042\uffd7\043\uffd7" +
    "\001\002\000\012\003\120\024\121\042\056\043\052\001" +
    "\002\000\016\003\uffd8\012\073\015\070\024\uffd8\042\uffd8" +
    "\043\uffd8\001\002\000\032\003\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\001\002\000\032\003\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\001\002\000\032\003\uffea\005" +
    "\uffea\006\uffea\007\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000\004\042" +
    "\124\001\002\000\006\003\125\005\126\001\002\000\032" +
    "\003\uffe9\005\uffe9\006\uffe9\007\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002" +
    "\000\006\003\127\024\130\001\002\000\032\003\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002\000\032\003" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002\000" +
    "\032\003\uffed\005\uffed\006\uffed\007\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001" +
    "\002\000\004\042\133\001\002\000\006\003\134\005\135" +
    "\001\002\000\032\003\uffec\005\uffec\006\uffec\007\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\001\002\000\006\003\136\024\137\001\002\000" +
    "\032\003\uffeb\005\uffeb\006\uffeb\007\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001" +
    "\002\000\032\003\ufff2\005\ufff2\006\ufff2\007\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\001\002\000\006\042\056\043\052\001\002\000\032" +
    "\003\uffde\005\uffde\006\uffde\007\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001\002" +
    "\000\010\005\144\042\056\043\052\001\002\000\012\005" +
    "\uffcd\011\066\042\uffcd\043\uffcd\001\002\000\024\006\013" +
    "\033\037\034\036\035\026\036\044\037\035\040\031\041" +
    "\043\042\040\001\002\000\012\005\uffce\011\066\042\uffce" +
    "\043\uffce\001\002\000\032\003\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\001\002\000\032\003\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\001\002\000\006\042\056\043" +
    "\052\001\002\000\010\005\152\042\056\043\052\001\002" +
    "\000\024\006\013\033\037\034\036\035\026\036\044\037" +
    "\035\040\031\041\043\042\040\001\002\000\032\003\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000\034" +
    "\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\001\002\000\032\003\uffdd\005\uffdd\006\uffdd\007\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\001\002\000\006\042\056\043\052\001\002\000" +
    "\010\005\162\042\056\043\052\001\002\000\014\003\161" +
    "\005\uffcd\011\066\042\uffcd\043\uffcd\001\002\000\032\003" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000" +
    "\024\006\013\033\037\034\036\035\026\036\044\037\035" +
    "\040\031\041\043\042\040\001\002\000\032\003\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\013\001\001\000" +
    "\010\005\015\006\021\007\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\033\004\027\006\040\007" +
    "\022\010\026\011\041\012\031\024\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\033\004\027\011\110\012" +
    "\031\024\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\033\004\027\011\140\012\031\024\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\050\015\054\016" +
    "\047\020\052\021\053\022\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\061\001\001\000\004\016" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\050\015\054\016\047\022\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\050\015\054\016\047" +
    "\021\066\022\046\001\001\000\002\001\001\000\006\015" +
    "\102\016\047\001\001\000\010\014\101\015\054\016\047" +
    "\001\001\000\002\001\001\000\006\015\100\016\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\033\004\027\010\105\011\041\012\031\024\032\001" +
    "\001\000\014\003\033\004\027\011\110\012\031\024\032" +
    "\001\001\000\014\003\033\004\027\011\111\012\031\024" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\115\014\114\015\054\016\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\116" +
    "\015\054\016\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\050" +
    "\015\054\016\047\017\141\020\142\021\053\022\046\001" +
    "\001\000\002\001\001\000\016\014\050\015\054\016\047" +
    "\020\144\021\053\022\046\001\001\000\002\001\001\000" +
    "\014\003\033\004\027\011\145\012\031\024\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\050\015\054\016\047\017\150\020\142\021\053" +
    "\022\046\001\001\000\016\014\050\015\054\016\047\020" +
    "\144\021\053\022\046\001\001\000\014\003\033\004\027" +
    "\011\152\012\031\024\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\050\015\054" +
    "\016\047\017\156\020\157\021\053\022\046\001\001\000" +
    "\016\014\050\015\054\016\047\020\144\021\053\022\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\033\004\027\011\162\012\031\024\032\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
          parser parser = new parser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
          e.printStackTrace();
		   System.out.println(e);
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= main lp rp MAINBLOK 
            {
              Object RESULT =null;
		
            System.out.println( "Redukcija po smeni 1.");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= main lp error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje zatvorena zagrada nakon otvorene");
             System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= main error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje otvorena zagrada nakon maina");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAINBLOK ::= lv VARLIST STATEMENTLIST rv 
            {
              Object RESULT =null;
		
            System.out.println( "Redukcija po smeni 2.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VARLIST ::= VARLIST VARDECL 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 3.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARLIST ::= VARDECL 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 4.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARDECL ::= TYPE id dotcomma 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 5.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARDECL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TYPE ::= _int 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 6.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= _float 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 7.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE ::= _char 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 8.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= _bool 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 9.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTLIST ::= STATEMENTLIST STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 12.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTLIST ::= STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 13.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= input lp id rp dotcomma 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 14.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= output lp id rp dotcomma 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 15.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= LOOP 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 16.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= id assign EXPRESSIONS dotcomma 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 17.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= IFSTATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 18.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= BLOK 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 19.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= output error 
            {
              Object RESULT =null;
		
              System.out.println( "Nedostaje otvorena zagrada output");
              System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= output lp id error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje zatvorena zagrada output");
              System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= output lp id rp error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje tacka zarez output");
             System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT ::= input error 
            {
              Object RESULT =null;
		
              System.out.println( "Nedostaje otvorena zagrada output");
              System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT ::= input lp id error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje zatvorena zagrada output");
              System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENT ::= input lp id rp error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje tacka zarez output");
             System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT ::= id error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje = ");
              System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENT ::= id assign EXPRESSIONS error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje tacka zarez");
             System.out.close();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LOOP ::= _while lp LOGEXPRESSIONS rp STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 20.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LOOP ::= _for lp STATEMENTLIST rp STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 21.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LOOP ::= _while error 
            {
              Object RESULT =null;
		
              System.out.println( "Nedostaje otovrena zagrada");
               System.out.close();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LOOP ::= _for error 
            {
              Object RESULT =null;
		
              System.out.println( "Nedostaje otovrena zagrada");
              System.out.close();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LOOP ::= _for lp STATEMENTLIST error 
            {
              Object RESULT =null;
		
             System.out.println( "Nedostaje zatvorena zagrada");
              System.out.close();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IFSTATEMENT ::= _if lp LOGEXPRESSIONS rp STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 22.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFSTATEMENT ::= _else lp LOGEXPRESSIONS rp STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 23.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFSTATEMENT ::= _else STATEMENT 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 24.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFSTATEMENT ::= _if error 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje otvorena zagrada");
               System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFSTATEMENT ::= _if lp LOGEXPRESSION error 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje zatvorena zagrada");
               System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IFSTATEMENT ::= _elseif error 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje otvorena zagrada");
               System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IFSTATEMENT ::= _elseif lp LOGEXPRESSION error 
            {
              Object RESULT =null;
		
               System.out.println( "Nedostaje zatvorena zagrada");
               System.out.close();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOK ::= MAINBLOK 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 25.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSIONS ::= EXPRESSIONS EXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 26.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESSIONS ::= EXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 27.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESSION ::= EXPRESSION plus TERM 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 28.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSION ::= EXPRESSION min TERM 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 29.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSION ::= TERM 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 30.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TERM ::= TERM mul FACTOR 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 31.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TERM ::= TERM div FACTOR 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 32.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TERM ::= FACTOR 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 33.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= id 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 34.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= _const 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 35.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LOGEXPRESSIONS ::= LOGEXPRESSIONS LOGEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 36.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGEXPRESSIONS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOGEXPRESSIONS ::= LOGEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 37.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGEXPRESSIONS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LOGEXPRESSION ::= LOGEXPRESSION or ANDEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 38.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGEXPRESSION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOGEXPRESSION ::= ANDEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 39.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGEXPRESSION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ANDEXPRESSION ::= ANDEXPRESSION and RELEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 40.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANDEXPRESSION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ANDEXPRESSION ::= RELEXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 41.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANDEXPRESSION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RELEXPRESSION ::= EXPRESSION RELOP EXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 42.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELEXPRESSION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RELEXPRESSION ::= EXPRESSION 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 43.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELEXPRESSION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RELOP ::= less 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 44.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELOP ::= lesse 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 45.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELOP ::= eq 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 46.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELOP ::= neq 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 47.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELOP ::= great 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 48.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELOP ::= greate 
            {
              Object RESULT =null;
		
             System.out.println( "Redukcija po smeni 49.");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
