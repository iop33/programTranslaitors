//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:
   public static void main( String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
          e.printStackTrace();
		   System.out.println(e);
	  }
   }
:};
//Terminal
terminal lp,rp,lv,rv,and,or,plus,mul,div,min,less,lesse,great,greate,eq,neq,dotcomma,assign,main;
terminal _float,_int,_bool,_char,input,output,_if,_elseif,_else,_while,_for,id,_const;

//Nonterminal
non terminal PROGRAM,MAINBLOK,BLOK,VARLIST,VARDECL,TYPE,STATEMENTLIST,STATEMENT,LOOP,EXPRESSIONS,EXPRESSION,TERM;
non terminal FACTOR,LOGEXPRESSIONS,LOGEXPRESSION,ANDEXPRESSION,RELEXPRESSION,RELOP,IFSTATEMENT;

//Grammar
PROGRAM ::=main lp rp MAINBLOK
        {:
            System.out.println( "Redukcija po smeni 1.");
        :}
        | main lp error
        {:
             System.out.println( "Nedostaje zatvorena zagrada nakon otvorene");
             System.out.close();
        :}
        | main error
        {:
            System.out.println( "Nedostaje otvorena zagrada nakon maina");
            System.out.close();
        :}
        ;
MAINBLOK ::= lv VARLIST STATEMENTLIST rv
            {:
            System.out.println( "Redukcija po smeni 2.");
            :}
            ;
VARLIST ::= VARLIST VARDECL
             {:
             System.out.println( "Redukcija po smeni 3.");
             :}
             | VARDECL
             {:
             System.out.println( "Redukcija po smeni 4.");
             :}
             ;
VARDECL ::= TYPE id dotcomma
             {:
             System.out.println( "Redukcija po smeni 5.");
             :}
            ;
TYPE ::= _int
             {:
             System.out.println( "Redukcija po smeni 6.");
             :}
             | _float
             {:
             System.out.println( "Redukcija po smeni 7.");
             :}
            | _char
             {:
             System.out.println( "Redukcija po smeni 8.");
             :}
            | _bool
             {:
             System.out.println( "Redukcija po smeni 9.");
             :}
             ;
STATEMENTLIST ::= STATEMENTLIST STATEMENT
             {:
             System.out.println( "Redukcija po smeni 12.");
             :}
             | STATEMENT
             {:
             System.out.println( "Redukcija po smeni 13.");
             :}
             ;
STATEMENT ::= input lp id rp dotcomma
            {:
             System.out.println( "Redukcija po smeni 14.");
             :}
             | output lp id rp dotcomma
             {:
             System.out.println( "Redukcija po smeni 15.");
             :}
             | LOOP
            {:
             System.out.println( "Redukcija po smeni 16.");
             :}
             | id assign EXPRESSIONS dotcomma
             {:
             System.out.println( "Redukcija po smeni 17.");
             :}
            | IFSTATEMENT
            {:
             System.out.println( "Redukcija po smeni 18.");
             :}
            | BLOK
            {:
             System.out.println( "Redukcija po smeni 19.");
            :}
            | output error
            {:
              System.out.println( "Nedostaje otvorena zagrada output");
              System.out.close();
            :}
            | output lp id error
            {:
             System.out.println( "Nedostaje zatvorena zagrada output");
              System.out.close();
            :}
            | output lp id rp error
            {:
             System.out.println( "Nedostaje tacka zarez output");
             System.out.close();
            :}
            | input error
            {:
              System.out.println( "Nedostaje otvorena zagrada output");
              System.out.close();
            :}
            | input lp id error
            {:
             System.out.println( "Nedostaje zatvorena zagrada output");
              System.out.close();
            :}
            | input lp id rp error
            {:
             System.out.println( "Nedostaje tacka zarez output");
             System.out.close();
            :}
            | id error
            {:
             System.out.println( "Nedostaje = ");
              System.out.close();
            :}
            |  id assign EXPRESSIONS error
            {:
             System.out.println( "Nedostaje tacka zarez");
             System.out.close();
            :}
            ;
LOOP ::= _while lp LOGEXPRESSIONS rp STATEMENT
             {:
             System.out.println( "Redukcija po smeni 20.");
             :}
             | _for lp STATEMENTLIST rp STATEMENT
            {:
             System.out.println( "Redukcija po smeni 21.");
             :}
            | _while error
            {:
              System.out.println( "Nedostaje otovrena zagrada");
               System.out.close();
             :}
            | _for error
            {:
              System.out.println( "Nedostaje otovrena zagrada");
              System.out.close();
             :}
             | _for lp STATEMENTLIST error
            {:
             System.out.println( "Nedostaje zatvorena zagrada");
              System.out.close();
             :}
             ;
IFSTATEMENT ::= _if lp LOGEXPRESSIONS rp STATEMENT
            {:
             System.out.println( "Redukcija po smeni 22.");
             :}
             | _else lp LOGEXPRESSIONS rp STATEMENT
            {:
             System.out.println( "Redukcija po smeni 23.");
             :}
             | _else STATEMENT
            {:
             System.out.println( "Redukcija po smeni 24.");
             :}
            | _if error
              {:
               System.out.println( "Nedostaje otvorena zagrada");
               System.out.close();
              :}
              | _if lp LOGEXPRESSION error
              {:
               System.out.println( "Nedostaje zatvorena zagrada");
               System.out.close();
              :}
                | _elseif error
              {:
               System.out.println( "Nedostaje otvorena zagrada");
               System.out.close();
              :}
                | _elseif lp LOGEXPRESSION error
              {:
               System.out.println( "Nedostaje zatvorena zagrada");
               System.out.close();
              :}
              ;
BLOK ::= MAINBLOK
             {:
             System.out.println( "Redukcija po smeni 25.");
             :}
             ;

EXPRESSIONS ::= EXPRESSIONS EXPRESSION
            {:
             System.out.println( "Redukcija po smeni 26.");
             :}
             | EXPRESSION
            {:
             System.out.println( "Redukcija po smeni 27.");
             :}
             ;
EXPRESSION ::= EXPRESSION plus TERM
            {:
             System.out.println( "Redukcija po smeni 28.");
             :}
             | EXPRESSION min TERM
            {:
             System.out.println( "Redukcija po smeni 29.");
             :}
            | TERM
            {:
             System.out.println( "Redukcija po smeni 30.");
             :}
             ;
TERM ::= TERM mul FACTOR
             {:
             System.out.println( "Redukcija po smeni 31.");
             :}
             | TERM div FACTOR
            {:
             System.out.println( "Redukcija po smeni 32.");
             :}
             | FACTOR
             {:
             System.out.println( "Redukcija po smeni 33.");
             :}
             ;
FACTOR ::= id
             {:
             System.out.println( "Redukcija po smeni 34.");
             :}
             | _const
            {:
             System.out.println( "Redukcija po smeni 35.");
             :}
             ;
LOGEXPRESSIONS ::= LOGEXPRESSIONS LOGEXPRESSION
            {:
             System.out.println( "Redukcija po smeni 36.");
             :}
             | LOGEXPRESSION
            {:
             System.out.println( "Redukcija po smeni 37.");
             :}
             ;
LOGEXPRESSION ::= LOGEXPRESSION or ANDEXPRESSION
             {:
             System.out.println( "Redukcija po smeni 38.");
             :}
             | ANDEXPRESSION
            {:
             System.out.println( "Redukcija po smeni 39.");
             :}
              ;
ANDEXPRESSION ::= ANDEXPRESSION and RELEXPRESSION
             {:
             System.out.println( "Redukcija po smeni 40.");
             :}
             | RELEXPRESSION
            {:
             System.out.println( "Redukcija po smeni 41.");
             :}

              ;
RELEXPRESSION ::= EXPRESSION RELOP EXPRESSION
            {:
             System.out.println( "Redukcija po smeni 42.");
             :}
             | EXPRESSION
            {:
             System.out.println( "Redukcija po smeni 43.");
             :}
             ;
RELOP ::= less
            {:
             System.out.println( "Redukcija po smeni 44.");
             :}
             | lesse
            {:
             System.out.println( "Redukcija po smeni 45.");
             :}
            | eq
            {:
             System.out.println( "Redukcija po smeni 46.");
             :}
            | neq
            {:
             System.out.println( "Redukcija po smeni 47.");
             :}
            | great
            {:
             System.out.println( "Redukcija po smeni 48.");
             :}
            | greate
            {:
             System.out.println( "Redukcija po smeni 49.");
             :}
             ;


